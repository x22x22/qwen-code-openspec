# Diff for packages/sdk/typescript/test/unit/ProcessTransport.test.ts
diff --git a/packages/sdk/typescript/test/unit/ProcessTransport.test.ts b/packages/sdk/typescript/test/unit/ProcessTransport.test.ts
new file mode 100644
index 00000000..c470f884
--- /dev/null
+++ b/packages/sdk/typescript/test/unit/ProcessTransport.test.ts
@@ -0,0 +1,207 @@
+/**
+ * Unit tests for ProcessTransport
+ * Tests subprocess lifecycle management and IPC
+ */
+
+import { describe, expect, it } from 'vitest';
+
+// Note: This is a placeholder test file
+// ProcessTransport will be implemented in Phase 3 Implementation (T021)
+// These tests are written first following TDD approach
+
+describe('ProcessTransport', () => {
+  describe('Construction and Initialization', () => {
+    it('should create transport with required options', () => {
+      // Test will be implemented with actual ProcessTransport class
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should validate pathToQwenExecutable exists', () => {
+      // Should throw if pathToQwenExecutable does not exist
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should build CLI arguments correctly', () => {
+      // Should include --input-format stream-json --output-format stream-json
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('Lifecycle Management', () => {
+    it('should spawn subprocess on start()', async () => {
+      // Should call child_process.spawn
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should set isReady to true after successful start', async () => {
+      // isReady should be true after start() completes
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should throw if subprocess fails to spawn', async () => {
+      // Should throw Error if ENOENT or spawn fails
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should close subprocess gracefully with SIGTERM', async () => {
+      // Should send SIGTERM first
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should force kill with SIGKILL after timeout', async () => {
+      // Should send SIGKILL after 5s if process doesn\'t exit
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should be idempotent when calling close() multiple times', async () => {
+      // Multiple close() calls should not error
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should wait for process exit in waitForExit()', async () => {
+      // Should resolve when process exits
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('Message Reading', () => {
+    it('should read JSON Lines from stdout', async () => {
+      // Should use readline to read lines and parse JSON
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should yield parsed messages via readMessages()', async () => {
+      // Should yield messages as async generator
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should skip malformed JSON lines with warning', async () => {
+      // Should log warning and continue on parse error
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should complete generator when process exits', async () => {
+      // readMessages() should complete when stdout closes
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should set exitError on unexpected process crash', async () => {
+      // exitError should be set if process crashes
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('Message Writing', () => {
+    it('should write JSON Lines to stdin', () => {
+      // Should write JSON + newline to stdin
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should throw if writing before transport is ready', () => {
+      // write() should throw if isReady is false
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should throw if writing to closed transport', () => {
+      // write() should throw if transport is closed
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('Error Handling', () => {
+    it('should handle process spawn errors', async () => {
+      // Should throw descriptive error on spawn failure
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should handle process exit with non-zero code', async () => {
+      // Should set exitError when process exits with error
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should handle write errors to closed stdin', () => {
+      // Should throw if stdin is closed
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('Resource Cleanup', () => {
+    it('should register cleanup on parent process exit', () => {
+      // Should register process.on(\'exit\') handler
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should kill subprocess on parent exit', () => {
+      // Cleanup should kill child process
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should remove event listeners on close', async () => {
+      // Should clean up all event listeners
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('CLI Arguments', () => {
+    it('should include --input-format stream-json', () => {
+      // Args should always include input format flag
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should include --output-format stream-json', () => {
+      // Args should always include output format flag
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should include --model if provided', () => {
+      // Args should include model flag if specified
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should include --permission-mode if provided', () => {
+      // Args should include permission mode flag if specified
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should include --mcp-server for external MCP servers', () => {
+      // Args should include MCP server configs
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('Working Directory', () => {
+    it('should spawn process in specified cwd', async () => {
+      // Should use cwd option for child_process.spawn
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should default to process.cwd() if not specified', async () => {
+      // Should use current working directory by default
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('Environment Variables', () => {
+    it('should pass environment variables to subprocess', async () => {
+      // Should merge env with process.env
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should inherit parent env by default', async () => {
+      // Should use process.env if no env option
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+
+  describe('Debug Mode', () => {
+    it('should inherit stderr when debug is true', async () => {
+      // Should set stderr: \'inherit\' if debug flag set
+      expect(true).toBe(true); // Placeholder
+    });
+
+    it('should ignore stderr when debug is false', async () => {
+      // Should set stderr: \'ignore\' if debug flag not set
+      expect(true).toBe(true); // Placeholder
+    });
+  });
+});
